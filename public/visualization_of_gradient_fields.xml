<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Visualization Of Gradient Fields</title>
  <atom:link href="https://magiromanya.com/visualization_of_gradient_fields.xml" rel="self" type="application/rss+xml" />
  <link>https://magiromanya.com/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Sat, 02 Mar 2024 18:47:24 +0100</pubDate>
  <lastBuildDate>Sat, 02 Mar 2024 18:47:24 +0100</lastBuildDate>
  <generator>Emacs 29.2 Org-mode 9.6.15</generator>
  <webMaster>magiromanya@gmail.com (Magí Romanyà Serrasolsas)</webMaster>
  <image>
    <url>https://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Visualization Of Gradient Fields</title>
    <link>https://magiromanya.com/</link>
  </image>

  <p>
    I've decided to write this article because I've encountered a number of problems while trying to visualize gradients as arrow fields in a 2 dimensional plot.
    Some of these were problems related with me not using <code>numpy</code> or <code>matplotlib</code> correctly, and others were concerned with some unexpected geometry scaling.
  </p>

  <item>
    <title>A few thing to do when using ~matplotlib~ and ~numpy~ to compute and plot gradient fields</title>
    <link>https://magiromanya.com/visualization_of_gradient_fields.html#orgc3d3f6d</link>
    <author>magiromanya@gmail.com (Magí Romanyà Serrasolsas)</author>
    <guid isPermaLink="false">https://magiromanya.com/visualization_of_gradient_fields.html#orgc3d3f6d</guid>
    <pubDate>Fri, 01 Mar 2024 16:37:00 +0100</pubDate>

    <description><![CDATA[<p>
    First let's discuss how to use correctly use <code>matplotlib</code> and <code>numpy</code> to compute and plot a two dimensional gradient field.
    We are going to discuss an example where we want to plot the function \(z(x,y) = x^2 +y\) as level curves and also it's gradient fields.
    To plot two dimensional functions we usually have to use the <code>numpy.meshgrid</code> function.
    However, calling this function in the default way, it returns first \(y\) and then \(x\).
    To prevent this behavior we have to use the argument <code>indexing='ij'</code>.
    We are going to use the <code>numpy.gradients</code> function to compute the gradients, which uses finite differences.
    A default call to this function only requires the \(x,y,z\) values and it is going to assume the finite differences step.
    It is important to provide the \(dx\) and \(dy\) values in order to compute the correct gradients.
    The last problem appears when trying to plot the gradients as arrows using the <code>matplotlib.pyplot.quiver</code>.
    It is essential to set the following function arguments <code>angles='xy', scale_units='xy', scale=1</code> to tell matplotlib that we want our gradients to be plotted in the correct coordinate system.
    The <code>scale</code> parameter is going to scale the lengths of the arrows <b>inversely</b> and can be adjusted as needed.
    Here we have the code for the completed process of the computation of function \(z\), its gradients and also the visualization.
    Note all the parameters that we have to introduce to get the expected result.
    </p>
    <div class="org-src-container">
    <pre class="src src-python"><span class="org-keyword">import</span> matplotlib.pyplot <span class="org-keyword">as</span> plt
    <span class="org-keyword">import</span> numpy <span class="org-keyword">as</span> np
    <span class="org-variable-name">x_values</span> <span class="org-operator">=</span> np.linspace(0, 1, 15)
    <span class="org-variable-name">y_values</span> <span class="org-operator">=</span> np.linspace(0, 1, 15)
    <span class="org-variable-name">X</span>, <span class="org-variable-name">Y</span> <span class="org-operator">=</span> np.meshgrid(x_values, y_values, indexing<span class="org-operator">=</span><span class="org-string">'ij'</span>)
    <span class="org-variable-name">Z</span> <span class="org-operator">=</span> X<span class="org-operator">**</span>2 <span class="org-operator">+</span> Y
    <span class="org-variable-name">dx</span> <span class="org-operator">=</span> x_values[1] <span class="org-operator">-</span> x_values[0]
    <span class="org-variable-name">dy</span> <span class="org-operator">=</span> y_values[1] <span class="org-operator">-</span> y_values[0]
    <span class="org-variable-name">grad_x</span>, <span class="org-variable-name">grad_y</span> <span class="org-operator">=</span> np.gradient(Z, dx, dy)
    plt.contourf(X, Y, Z, levels<span class="org-operator">=</span>10) <span class="org-comment-delimiter"># </span><span class="org-comment">Plot the color map with level curves</span>
    plt.quiver(X, Y, grad_x, grad_y, color<span class="org-operator">=</span><span class="org-string">'honeydew'</span>, angles<span class="org-operator">=</span><span class="org-string">"xy"</span>) <span class="org-comment-delimiter"># </span><span class="org-comment">Plot the gradient field</span>
    plt.show()
    </pre>
    </div>


    <div id="org231d378" class="figure">
    <p><img src="../resources/gradients1.png" alt="gradients1.png" class="center no-border" />
    </p>
    <p><span class="figure-number">Figure 1: </span>Result of the code snippet provided above. We have correctly generated a plot which depicts our 2 dimensional function with a color-map and level curves, together with a gradient vector field.</p>
    </div>
    ]]></description>
  </item>

  <item>
    <title>The geometry problem</title>
    <link>https://magiromanya.com/visualization_of_gradient_fields.html#org36096c6</link>
    <author>magiromanya@gmail.com (Magí Romanyà Serrasolsas)</author>
    <guid isPermaLink="false">https://magiromanya.com/visualization_of_gradient_fields.html#org36096c6</guid>
    <pubDate>Fri, 01 Mar 2024 16:37:00 +0100</pubDate>

    <description><![CDATA[<p>
    With this, we have seemingly been able to compute the gradients and plot them correctly.
    However if we make the same plot but with a different domain \(x\in [0,1]\), \(y\in [0,10]\) we get the figure:
    </p>

    <div id="org03700e2" class="figure">
    <p><img src="../resources/gradients2.png" alt="gradients2.png" class="center no-border" />
    </p>
    <p><span class="figure-number">Figure 2: </span>Plot made using the same code snippet, but tweaking the domain evaluated. In this plot it is plain to see that the gradient field is <b>not</b> perpendicular to the level curves.</p>
    </div>

    <p>
    The problem with this result, is that the gradient field is not perpendicular to the level curves, as we would expect.
    This happens because now that we have changed the domain, we have a \(y\) axis which has been compressed to fit 10 units in the size of 1.
    Consequently the gradients also have been squished in the \(y\) axis.
    <b>This is not a bug but the correct representation</b>.
    However, we might want our gradient visualization to be perpendicular to the level curves, to make the visualization of figure <a href="#org03700e2">2</a> clearer.
    This can be done by defining a scale ratio variable \(s = \frac{\textrm{y scale}}{\textrm{x scale}}\).
    With this we have to apply the following transformation to the gradients:
    \[|\vec{\nabla} z| = \sqrt{{\frac{\partial z}{\partial x}}^2 + {\frac{\partial z}{\partial y}}^2}\]
    \[A = \sqrt{\left(\frac{\partial z}{\partial x}\cdot s^2\right)^2 + {\frac{\partial z}{\partial y}}^2}\]
    \[\vec{\nabla} z_\textrm{perpendicular} = \left(\frac{\partial z}{\partial x}\cdot s^2, \frac{\partial z}{\partial y}\right)\frac{A}{|\vec{\nabla} z|}\]
    </p>

    <p>
    Here we have the python code to implement this, which is easier than the math might seem, as well as the output figure:
    </p>
    <div class="org-src-container">
    <pre class="src src-python"><span class="org-keyword">import</span> matplotlib.pyplot <span class="org-keyword">as</span> plt
    <span class="org-keyword">import</span> numpy <span class="org-keyword">as</span> np
    <span class="org-variable-name">x_values</span> <span class="org-operator">=</span> np.linspace(0, 1, 15)
    <span class="org-variable-name">y_values</span> <span class="org-operator">=</span> np.linspace(0, 10, 15)
    <span class="org-variable-name">scale</span> <span class="org-operator">=</span> (1 <span class="org-operator">/</span> 10)<span class="org-operator">**</span>2
    <span class="org-variable-name">X</span>, <span class="org-variable-name">Y</span> <span class="org-operator">=</span> np.meshgrid(x_values, y_values, indexing<span class="org-operator">=</span><span class="org-string">'ij'</span>)
    <span class="org-variable-name">Z</span> <span class="org-operator">=</span> X<span class="org-operator">**</span>2 <span class="org-operator">+</span> Y
    <span class="org-variable-name">dx</span> <span class="org-operator">=</span> x_values[1] <span class="org-operator">-</span> x_values[0]
    <span class="org-variable-name">dy</span> <span class="org-operator">=</span> y_values[1] <span class="org-operator">-</span> y_values[0]
    <span class="org-variable-name">grad_x</span>, <span class="org-variable-name">grad_y</span> <span class="org-operator">=</span> np.gradient(Z, dx, dy)
    <span class="org-variable-name">true_norm</span> <span class="org-operator">=</span> np.sqrt((grad_x)<span class="org-operator">**</span>2 <span class="org-operator">+</span> grad_y<span class="org-operator">**</span>2)
    <span class="org-variable-name">norm</span> <span class="org-operator">=</span> np.sqrt((grad_x<span class="org-operator">*</span>scale)<span class="org-operator">**</span>2 <span class="org-operator">+</span> grad_y<span class="org-operator">**</span>2)
    plt.contourf(X, Y, Z, levels<span class="org-operator">=</span>10)
    plt.quiver(X, Y, grad_x<span class="org-operator">/</span>norm<span class="org-operator">*</span>scale<span class="org-operator">*</span>true_norm, grad_y<span class="org-operator">/</span>norm<span class="org-operator">*</span>true_norm, color<span class="org-operator">=</span><span class="org-string">'honeydew'</span>, angles<span class="org-operator">=</span><span class="org-string">"xy"</span>)
    </pre>
    </div>


    <div id="orgb795ddb" class="figure">
    <p><img src="../resources/gradients3.png" alt="gradients3.png" class="center no-border" />
    </p>
    <p><span class="figure-number">Figure 3: </span>Result of the code snippet above. Here we can see that the gradient field is again perpendicular to the level curves as we would expect.</p>
    </div>

    <p>
    The result is a gradient field that is perpendicular to the level curves.
    Note that the scaling does not only depend on the domain of the \(x\) and \(y\) axis, but also with he aspect ratio of the figure itself.
    </p>
    ]]></description>
</item>
</channel>
</rss>
